/* Generated By:JavaCC: Do not edit this line. BNParse.java */
import java.util.ArrayList;

@SuppressWarnings( "unused" )
public class BNParse implements BNParseConstants {
    static BNNode node;
    static boolean verbose = true;

    public static void main(String args[]) throws ParseException {
        BNParse parser = new BNParse(System.in);
        try {
            parser.parseInput();
        } catch (ParseException x) {
            System.out.println("Terminating belief net parse.");
            throw x;
        }
        if (verbose)
            for (BNNode node : BNNode.nodes)
                System.out.println(node);
    }

  final public void parseInput() throws ParseException {
    cptList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EVIDENCE:
      jj_consume_token(EVIDENCE);
      evidenceList();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(0);
            BNNode.computeChildren();
  }

  final public void cptList() throws ParseException {
    label_1:
    while (true) {
      cpt();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROB_OF:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

  final public void cpt() throws ParseException {
    node = new BNNode();  ArrayList<BNNode> parents; ArrayList<Double> probabilities;
    jj_consume_token(PROB_OF);
    jj_consume_token(LPAREN);
    jj_consume_token(VARNAME);
            node.name = token.image;
            for (BNNode node2 : BNNode.nodes) {
                if (node.name.equals(node2.name)) {
                    System.err.println("Duplicate CPT definition for node " + node.name + "\u005cn");
                    {if (true) throw new ParseException();}
                }
            }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONDITIONED_ON:
      jj_consume_token(CONDITIONED_ON);
      parents = parentList();
            node.parents = new BNNode[parents.size()];
            node.parents = (BNNode[]) parents.toArray(node.parents);
            for (BNNode parent : parents)
                if (node.name.equals(parent.name)) {
                    System.err.println("Cannot have node " + node.name + " conditioned on itself.");
                    {if (true) throw new ParseException();}
                }
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(EQUALS);
    probabilities = pvalueList();
            node.cpt = new double[probabilities.size()];
            for (int i = 0; i < node.cpt.length; i++)
                node.cpt[i] = probabilities.get(i);
            if (node.parents == null)
                node.parents = new BNNode[0];
            BNNode.nodes.add(node);
  }

  final public ArrayList<BNNode> parentList() throws ParseException {
  ArrayList<BNNode> parents = new ArrayList<BNNode>(); BNNode parent;
    parent = parent();
                     parents.add(parent);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      parent = parent();
                                                                      parents.add(parent);
    }
                                                                                                {if (true) return parents;}
    throw new Error("Missing return statement in function");
  }

  final public BNNode parent() throws ParseException {
  BNNode parent = null;
    jj_consume_token(VARNAME);
            String parentName = token.image;
            for (BNNode node : BNNode.nodes)
                if (node.name.equals(parentName)) {
                    parent = node;
                    break;
                }
            if (parent == null) {
                System.err.println("Node " + parentName + " CPT not defined before use as parent.");
                {if (true) throw new ParseException();}
            }
            {if (true) return parent;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Double> pvalueList() throws ParseException {
  ArrayList<Double> probabilities = new ArrayList<Double>(); double probability;
    jj_consume_token(CPT_BEGIN);
    probability = pvalue();
                                      probabilities.add(probability);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      probability = pvalue();
                                                                                                       probabilities.add(probability);
    }
    jj_consume_token(CPT_END);
     {if (true) return probabilities;}
    throw new Error("Missing return statement in function");
  }

  final public double pvalue() throws ParseException {
  double probability;
    jj_consume_token(PVALUE);
            String valueString = token.image;
            probability = Double.parseDouble(valueString);
            if (probability > 1.0) {
                System.err.println("Probability value greater than one: " + probability);
                {if (true) throw new ParseException();}
            }
            {if (true) return probability;}
    throw new Error("Missing return statement in function");
  }

  final public void evidenceList() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case VARNAME:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      evidence();
    }
  }

  final public void evidence() throws ParseException {
    String evidenceNodeName;
    BNNode evidenceNode;
    boolean value = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
             value = false;
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(VARNAME);
            evidenceNodeName = token.image;
            evidenceNode = null;
            for (BNNode node : BNNode.nodes)
                if (node.name.equals(evidenceNodeName)) {
                    evidenceNode = node;
                    break;
                }
            if (evidenceNode == null) {
                System.err.println("Node " + evidenceNodeName + " CPT not defined before use as evidence.");
                {if (true) throw new ParseException();}
            }
            evidenceNode.isEvidence = true;
            evidenceNode.value = value;
  }

  /** Generated Token Manager. */
  public BNParseTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000,0x20,0x80,0x100,0x100,0x14000,0x4000,};
   }

  /** Constructor with InputStream. */
  public BNParse(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BNParse(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BNParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public BNParse(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BNParseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public BNParse(BNParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BNParseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
